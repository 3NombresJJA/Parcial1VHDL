// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/24/2023 22:50:33"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ParcialV1_4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ParcialV1_4_vlg_sample_tst(
	Clk,
	Entrada,
	sampler_tx
);
input  Clk;
input [7:0] Entrada;
output sampler_tx;

reg sample;
time current_time;
always @(Clk or Entrada)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ParcialV1_4_vlg_check_tst (
	Felicitacion,
	SalidaNum,
	SalMinUNi,
	SalSegDec,
	SalSegUni,
	sampler_rx
);
input  Felicitacion;
input [6:0] SalidaNum;
input [6:0] SalMinUNi;
input [6:0] SalSegDec;
input [6:0] SalSegUni;
input sampler_rx;

reg  Felicitacion_expected;
reg [6:0] SalidaNum_expected;
reg [6:0] SalMinUNi_expected;
reg [6:0] SalSegDec_expected;
reg [6:0] SalSegUni_expected;

reg  Felicitacion_prev;
reg [6:0] SalidaNum_prev;
reg [6:0] SalMinUNi_prev;
reg [6:0] SalSegDec_prev;
reg [6:0] SalSegUni_prev;

reg  Felicitacion_expected_prev;
reg [6:0] SalidaNum_expected_prev;
reg [6:0] SalMinUNi_expected_prev;
reg [6:0] SalSegDec_expected_prev;
reg [6:0] SalSegUni_expected_prev;

reg  last_Felicitacion_exp;
reg [6:0] last_SalidaNum_exp;
reg [6:0] last_SalMinUNi_exp;
reg [6:0] last_SalSegDec_exp;
reg [6:0] last_SalSegUni_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	Felicitacion_prev = Felicitacion;
	SalidaNum_prev = SalidaNum;
	SalMinUNi_prev = SalMinUNi;
	SalSegDec_prev = SalSegDec;
	SalSegUni_prev = SalSegUni;
end

// update expected /o prevs

always @(trigger)
begin
	Felicitacion_expected_prev = Felicitacion_expected;
	SalidaNum_expected_prev = SalidaNum_expected;
	SalMinUNi_expected_prev = SalMinUNi_expected;
	SalSegDec_expected_prev = SalSegDec_expected;
	SalSegUni_expected_prev = SalSegUni_expected;
end


// expected SalidaNum[ 6 ]
initial
begin
	SalidaNum_expected[6] = 1'bX;
end 
// expected SalidaNum[ 5 ]
initial
begin
	SalidaNum_expected[5] = 1'bX;
end 
// expected SalidaNum[ 4 ]
initial
begin
	SalidaNum_expected[4] = 1'bX;
end 
// expected SalidaNum[ 3 ]
initial
begin
	SalidaNum_expected[3] = 1'bX;
end 
// expected SalidaNum[ 2 ]
initial
begin
	SalidaNum_expected[2] = 1'bX;
end 
// expected SalidaNum[ 1 ]
initial
begin
	SalidaNum_expected[1] = 1'bX;
end 
// expected SalidaNum[ 0 ]
initial
begin
	SalidaNum_expected[0] = 1'bX;
end 
// expected SalMinUNi[ 6 ]
initial
begin
	SalMinUNi_expected[6] = 1'bX;
end 
// expected SalMinUNi[ 5 ]
initial
begin
	SalMinUNi_expected[5] = 1'bX;
end 
// expected SalMinUNi[ 4 ]
initial
begin
	SalMinUNi_expected[4] = 1'bX;
end 
// expected SalMinUNi[ 3 ]
initial
begin
	SalMinUNi_expected[3] = 1'bX;
end 
// expected SalMinUNi[ 2 ]
initial
begin
	SalMinUNi_expected[2] = 1'bX;
end 
// expected SalMinUNi[ 1 ]
initial
begin
	SalMinUNi_expected[1] = 1'bX;
end 
// expected SalMinUNi[ 0 ]
initial
begin
	SalMinUNi_expected[0] = 1'bX;
end 
// expected SalSegDec[ 6 ]
initial
begin
	SalSegDec_expected[6] = 1'bX;
end 
// expected SalSegDec[ 5 ]
initial
begin
	SalSegDec_expected[5] = 1'bX;
end 
// expected SalSegDec[ 4 ]
initial
begin
	SalSegDec_expected[4] = 1'bX;
end 
// expected SalSegDec[ 3 ]
initial
begin
	SalSegDec_expected[3] = 1'bX;
end 
// expected SalSegDec[ 2 ]
initial
begin
	SalSegDec_expected[2] = 1'bX;
end 
// expected SalSegDec[ 1 ]
initial
begin
	SalSegDec_expected[1] = 1'bX;
end 
// expected SalSegDec[ 0 ]
initial
begin
	SalSegDec_expected[0] = 1'bX;
end 
// expected SalSegUni[ 6 ]
initial
begin
	SalSegUni_expected[6] = 1'bX;
end 
// expected SalSegUni[ 5 ]
initial
begin
	SalSegUni_expected[5] = 1'bX;
end 
// expected SalSegUni[ 4 ]
initial
begin
	SalSegUni_expected[4] = 1'bX;
end 
// expected SalSegUni[ 3 ]
initial
begin
	SalSegUni_expected[3] = 1'bX;
end 
// expected SalSegUni[ 2 ]
initial
begin
	SalSegUni_expected[2] = 1'bX;
end 
// expected SalSegUni[ 1 ]
initial
begin
	SalSegUni_expected[1] = 1'bX;
end 
// expected SalSegUni[ 0 ]
initial
begin
	SalSegUni_expected[0] = 1'bX;
end 

// expected Felicitacion
initial
begin
	Felicitacion_expected = 1'bX;
end 
// generate trigger
always @(Felicitacion_expected or Felicitacion or SalidaNum_expected or SalidaNum or SalMinUNi_expected or SalMinUNi or SalSegDec_expected or SalSegDec or SalSegUni_expected or SalSegUni)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Felicitacion = %b | expected SalidaNum = %b | expected SalMinUNi = %b | expected SalSegDec = %b | expected SalSegUni = %b | ",Felicitacion_expected_prev,SalidaNum_expected_prev,SalMinUNi_expected_prev,SalSegDec_expected_prev,SalSegUni_expected_prev);
	$display("| real Felicitacion = %b | real SalidaNum = %b | real SalMinUNi = %b | real SalSegDec = %b | real SalSegUni = %b | ",Felicitacion_prev,SalidaNum_prev,SalMinUNi_prev,SalSegDec_prev,SalSegUni_prev);
`endif
	if (
		( Felicitacion_expected_prev !== 1'bx ) && ( Felicitacion_prev !== Felicitacion_expected_prev )
		&& ((Felicitacion_expected_prev !== last_Felicitacion_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Felicitacion :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Felicitacion_expected_prev);
		$display ("     Real value = %b", Felicitacion_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Felicitacion_exp = Felicitacion_expected_prev;
	end
	if (
		( SalidaNum_expected_prev[0] !== 1'bx ) && ( SalidaNum_prev[0] !== SalidaNum_expected_prev[0] )
		&& ((SalidaNum_expected_prev[0] !== last_SalidaNum_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaNum[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaNum_expected_prev);
		$display ("     Real value = %b", SalidaNum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SalidaNum_exp[0] = SalidaNum_expected_prev[0];
	end
	if (
		( SalidaNum_expected_prev[1] !== 1'bx ) && ( SalidaNum_prev[1] !== SalidaNum_expected_prev[1] )
		&& ((SalidaNum_expected_prev[1] !== last_SalidaNum_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaNum[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaNum_expected_prev);
		$display ("     Real value = %b", SalidaNum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SalidaNum_exp[1] = SalidaNum_expected_prev[1];
	end
	if (
		( SalidaNum_expected_prev[2] !== 1'bx ) && ( SalidaNum_prev[2] !== SalidaNum_expected_prev[2] )
		&& ((SalidaNum_expected_prev[2] !== last_SalidaNum_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaNum[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaNum_expected_prev);
		$display ("     Real value = %b", SalidaNum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SalidaNum_exp[2] = SalidaNum_expected_prev[2];
	end
	if (
		( SalidaNum_expected_prev[3] !== 1'bx ) && ( SalidaNum_prev[3] !== SalidaNum_expected_prev[3] )
		&& ((SalidaNum_expected_prev[3] !== last_SalidaNum_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaNum[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaNum_expected_prev);
		$display ("     Real value = %b", SalidaNum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SalidaNum_exp[3] = SalidaNum_expected_prev[3];
	end
	if (
		( SalidaNum_expected_prev[4] !== 1'bx ) && ( SalidaNum_prev[4] !== SalidaNum_expected_prev[4] )
		&& ((SalidaNum_expected_prev[4] !== last_SalidaNum_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaNum[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaNum_expected_prev);
		$display ("     Real value = %b", SalidaNum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SalidaNum_exp[4] = SalidaNum_expected_prev[4];
	end
	if (
		( SalidaNum_expected_prev[5] !== 1'bx ) && ( SalidaNum_prev[5] !== SalidaNum_expected_prev[5] )
		&& ((SalidaNum_expected_prev[5] !== last_SalidaNum_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaNum[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaNum_expected_prev);
		$display ("     Real value = %b", SalidaNum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SalidaNum_exp[5] = SalidaNum_expected_prev[5];
	end
	if (
		( SalidaNum_expected_prev[6] !== 1'bx ) && ( SalidaNum_prev[6] !== SalidaNum_expected_prev[6] )
		&& ((SalidaNum_expected_prev[6] !== last_SalidaNum_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalidaNum[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalidaNum_expected_prev);
		$display ("     Real value = %b", SalidaNum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SalidaNum_exp[6] = SalidaNum_expected_prev[6];
	end
	if (
		( SalMinUNi_expected_prev[0] !== 1'bx ) && ( SalMinUNi_prev[0] !== SalMinUNi_expected_prev[0] )
		&& ((SalMinUNi_expected_prev[0] !== last_SalMinUNi_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalMinUNi[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalMinUNi_expected_prev);
		$display ("     Real value = %b", SalMinUNi_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SalMinUNi_exp[0] = SalMinUNi_expected_prev[0];
	end
	if (
		( SalMinUNi_expected_prev[1] !== 1'bx ) && ( SalMinUNi_prev[1] !== SalMinUNi_expected_prev[1] )
		&& ((SalMinUNi_expected_prev[1] !== last_SalMinUNi_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalMinUNi[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalMinUNi_expected_prev);
		$display ("     Real value = %b", SalMinUNi_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SalMinUNi_exp[1] = SalMinUNi_expected_prev[1];
	end
	if (
		( SalMinUNi_expected_prev[2] !== 1'bx ) && ( SalMinUNi_prev[2] !== SalMinUNi_expected_prev[2] )
		&& ((SalMinUNi_expected_prev[2] !== last_SalMinUNi_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalMinUNi[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalMinUNi_expected_prev);
		$display ("     Real value = %b", SalMinUNi_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SalMinUNi_exp[2] = SalMinUNi_expected_prev[2];
	end
	if (
		( SalMinUNi_expected_prev[3] !== 1'bx ) && ( SalMinUNi_prev[3] !== SalMinUNi_expected_prev[3] )
		&& ((SalMinUNi_expected_prev[3] !== last_SalMinUNi_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalMinUNi[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalMinUNi_expected_prev);
		$display ("     Real value = %b", SalMinUNi_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SalMinUNi_exp[3] = SalMinUNi_expected_prev[3];
	end
	if (
		( SalMinUNi_expected_prev[4] !== 1'bx ) && ( SalMinUNi_prev[4] !== SalMinUNi_expected_prev[4] )
		&& ((SalMinUNi_expected_prev[4] !== last_SalMinUNi_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalMinUNi[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalMinUNi_expected_prev);
		$display ("     Real value = %b", SalMinUNi_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SalMinUNi_exp[4] = SalMinUNi_expected_prev[4];
	end
	if (
		( SalMinUNi_expected_prev[5] !== 1'bx ) && ( SalMinUNi_prev[5] !== SalMinUNi_expected_prev[5] )
		&& ((SalMinUNi_expected_prev[5] !== last_SalMinUNi_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalMinUNi[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalMinUNi_expected_prev);
		$display ("     Real value = %b", SalMinUNi_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SalMinUNi_exp[5] = SalMinUNi_expected_prev[5];
	end
	if (
		( SalMinUNi_expected_prev[6] !== 1'bx ) && ( SalMinUNi_prev[6] !== SalMinUNi_expected_prev[6] )
		&& ((SalMinUNi_expected_prev[6] !== last_SalMinUNi_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalMinUNi[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalMinUNi_expected_prev);
		$display ("     Real value = %b", SalMinUNi_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SalMinUNi_exp[6] = SalMinUNi_expected_prev[6];
	end
	if (
		( SalSegDec_expected_prev[0] !== 1'bx ) && ( SalSegDec_prev[0] !== SalSegDec_expected_prev[0] )
		&& ((SalSegDec_expected_prev[0] !== last_SalSegDec_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalSegDec[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalSegDec_expected_prev);
		$display ("     Real value = %b", SalSegDec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalSegDec_exp[0] = SalSegDec_expected_prev[0];
	end
	if (
		( SalSegDec_expected_prev[1] !== 1'bx ) && ( SalSegDec_prev[1] !== SalSegDec_expected_prev[1] )
		&& ((SalSegDec_expected_prev[1] !== last_SalSegDec_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalSegDec[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalSegDec_expected_prev);
		$display ("     Real value = %b", SalSegDec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalSegDec_exp[1] = SalSegDec_expected_prev[1];
	end
	if (
		( SalSegDec_expected_prev[2] !== 1'bx ) && ( SalSegDec_prev[2] !== SalSegDec_expected_prev[2] )
		&& ((SalSegDec_expected_prev[2] !== last_SalSegDec_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalSegDec[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalSegDec_expected_prev);
		$display ("     Real value = %b", SalSegDec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalSegDec_exp[2] = SalSegDec_expected_prev[2];
	end
	if (
		( SalSegDec_expected_prev[3] !== 1'bx ) && ( SalSegDec_prev[3] !== SalSegDec_expected_prev[3] )
		&& ((SalSegDec_expected_prev[3] !== last_SalSegDec_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalSegDec[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalSegDec_expected_prev);
		$display ("     Real value = %b", SalSegDec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalSegDec_exp[3] = SalSegDec_expected_prev[3];
	end
	if (
		( SalSegDec_expected_prev[4] !== 1'bx ) && ( SalSegDec_prev[4] !== SalSegDec_expected_prev[4] )
		&& ((SalSegDec_expected_prev[4] !== last_SalSegDec_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalSegDec[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalSegDec_expected_prev);
		$display ("     Real value = %b", SalSegDec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalSegDec_exp[4] = SalSegDec_expected_prev[4];
	end
	if (
		( SalSegDec_expected_prev[5] !== 1'bx ) && ( SalSegDec_prev[5] !== SalSegDec_expected_prev[5] )
		&& ((SalSegDec_expected_prev[5] !== last_SalSegDec_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalSegDec[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalSegDec_expected_prev);
		$display ("     Real value = %b", SalSegDec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalSegDec_exp[5] = SalSegDec_expected_prev[5];
	end
	if (
		( SalSegDec_expected_prev[6] !== 1'bx ) && ( SalSegDec_prev[6] !== SalSegDec_expected_prev[6] )
		&& ((SalSegDec_expected_prev[6] !== last_SalSegDec_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalSegDec[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalSegDec_expected_prev);
		$display ("     Real value = %b", SalSegDec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SalSegDec_exp[6] = SalSegDec_expected_prev[6];
	end
	if (
		( SalSegUni_expected_prev[0] !== 1'bx ) && ( SalSegUni_prev[0] !== SalSegUni_expected_prev[0] )
		&& ((SalSegUni_expected_prev[0] !== last_SalSegUni_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalSegUni[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalSegUni_expected_prev);
		$display ("     Real value = %b", SalSegUni_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SalSegUni_exp[0] = SalSegUni_expected_prev[0];
	end
	if (
		( SalSegUni_expected_prev[1] !== 1'bx ) && ( SalSegUni_prev[1] !== SalSegUni_expected_prev[1] )
		&& ((SalSegUni_expected_prev[1] !== last_SalSegUni_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalSegUni[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalSegUni_expected_prev);
		$display ("     Real value = %b", SalSegUni_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SalSegUni_exp[1] = SalSegUni_expected_prev[1];
	end
	if (
		( SalSegUni_expected_prev[2] !== 1'bx ) && ( SalSegUni_prev[2] !== SalSegUni_expected_prev[2] )
		&& ((SalSegUni_expected_prev[2] !== last_SalSegUni_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalSegUni[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalSegUni_expected_prev);
		$display ("     Real value = %b", SalSegUni_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SalSegUni_exp[2] = SalSegUni_expected_prev[2];
	end
	if (
		( SalSegUni_expected_prev[3] !== 1'bx ) && ( SalSegUni_prev[3] !== SalSegUni_expected_prev[3] )
		&& ((SalSegUni_expected_prev[3] !== last_SalSegUni_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalSegUni[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalSegUni_expected_prev);
		$display ("     Real value = %b", SalSegUni_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SalSegUni_exp[3] = SalSegUni_expected_prev[3];
	end
	if (
		( SalSegUni_expected_prev[4] !== 1'bx ) && ( SalSegUni_prev[4] !== SalSegUni_expected_prev[4] )
		&& ((SalSegUni_expected_prev[4] !== last_SalSegUni_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalSegUni[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalSegUni_expected_prev);
		$display ("     Real value = %b", SalSegUni_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SalSegUni_exp[4] = SalSegUni_expected_prev[4];
	end
	if (
		( SalSegUni_expected_prev[5] !== 1'bx ) && ( SalSegUni_prev[5] !== SalSegUni_expected_prev[5] )
		&& ((SalSegUni_expected_prev[5] !== last_SalSegUni_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalSegUni[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalSegUni_expected_prev);
		$display ("     Real value = %b", SalSegUni_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SalSegUni_exp[5] = SalSegUni_expected_prev[5];
	end
	if (
		( SalSegUni_expected_prev[6] !== 1'bx ) && ( SalSegUni_prev[6] !== SalSegUni_expected_prev[6] )
		&& ((SalSegUni_expected_prev[6] !== last_SalSegUni_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SalSegUni[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SalSegUni_expected_prev);
		$display ("     Real value = %b", SalSegUni_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SalSegUni_exp[6] = SalSegUni_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ParcialV1_4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clk;
reg [7:0] Entrada;
// wires                                               
wire Felicitacion;
wire [6:0] SalidaNum;
wire [6:0] SalMinUNi;
wire [6:0] SalSegDec;
wire [6:0] SalSegUni;

wire sampler;                             

// assign statements (if any)                          
ParcialV1_4 i1 (
// port map - connection between master ports and signals/registers   
	.Clk(Clk),
	.Entrada(Entrada),
	.Felicitacion(Felicitacion),
	.SalidaNum(SalidaNum),
	.SalMinUNi(SalMinUNi),
	.SalSegDec(SalSegDec),
	.SalSegUni(SalSegUni)
);

// Clk
always
begin
	Clk = 1'b0;
	Clk = #5000 1'b1;
	#5000;
end 
// Entrada[ 7 ]
initial
begin
	Entrada[7] = 1'b0;
end 
// Entrada[ 6 ]
initial
begin
	Entrada[6] = 1'b0;
end 
// Entrada[ 5 ]
initial
begin
	Entrada[5] = 1'b0;
end 
// Entrada[ 4 ]
initial
begin
	Entrada[4] = 1'b0;
end 
// Entrada[ 3 ]
initial
begin
	Entrada[3] = 1'b0;
end 
// Entrada[ 2 ]
initial
begin
	Entrada[2] = 1'b0;
	Entrada[2] = #30000 1'b1;
	Entrada[2] = #330000 1'b0;
	Entrada[2] = #70000 1'b1;
end 
// Entrada[ 1 ]
initial
begin
	Entrada[1] = 1'b0;
end 
// Entrada[ 0 ]
initial
begin
	Entrada[0] = 1'b0;
end 

ParcialV1_4_vlg_sample_tst tb_sample (
	.Clk(Clk),
	.Entrada(Entrada),
	.sampler_tx(sampler)
);

ParcialV1_4_vlg_check_tst tb_out(
	.Felicitacion(Felicitacion),
	.SalidaNum(SalidaNum),
	.SalMinUNi(SalMinUNi),
	.SalSegDec(SalSegDec),
	.SalSegUni(SalSegUni),
	.sampler_rx(sampler)
);
endmodule

