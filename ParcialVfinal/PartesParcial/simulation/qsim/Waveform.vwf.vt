// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/22/2023 12:41:40"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Cronometro
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Cronometro_vlg_sample_tst(
	clk,
	Switche,
	sampler_tx
);
input  clk;
input  Switche;
output sampler_tx;

reg sample;
time current_time;
always @(clk or Switche)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Cronometro_vlg_check_tst (
	Felicitacion,
	Mu,
	Sd,
	Su,
	sampler_rx
);
input  Felicitacion;
input [3:0] Mu;
input [2:0] Sd;
input [3:0] Su;
input sampler_rx;

reg  Felicitacion_expected;
reg [3:0] Mu_expected;
reg [2:0] Sd_expected;
reg [3:0] Su_expected;

reg  Felicitacion_prev;
reg [3:0] Mu_prev;
reg [2:0] Sd_prev;
reg [3:0] Su_prev;

reg  Felicitacion_expected_prev;
reg [3:0] Mu_expected_prev;
reg [2:0] Sd_expected_prev;
reg [3:0] Su_expected_prev;

reg  last_Felicitacion_exp;
reg [3:0] last_Mu_exp;
reg [2:0] last_Sd_exp;
reg [3:0] last_Su_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	Felicitacion_prev = Felicitacion;
	Mu_prev = Mu;
	Sd_prev = Sd;
	Su_prev = Su;
end

// update expected /o prevs

always @(trigger)
begin
	Felicitacion_expected_prev = Felicitacion_expected;
	Mu_expected_prev = Mu_expected;
	Sd_expected_prev = Sd_expected;
	Su_expected_prev = Su_expected;
end


// expected Mu[ 3 ]
initial
begin
	Mu_expected[3] = 1'bX;
end 
// expected Mu[ 2 ]
initial
begin
	Mu_expected[2] = 1'bX;
end 
// expected Mu[ 1 ]
initial
begin
	Mu_expected[1] = 1'bX;
end 
// expected Mu[ 0 ]
initial
begin
	Mu_expected[0] = 1'bX;
end 
// expected Sd[ 2 ]
initial
begin
	Sd_expected[2] = 1'bX;
end 
// expected Sd[ 1 ]
initial
begin
	Sd_expected[1] = 1'bX;
end 
// expected Sd[ 0 ]
initial
begin
	Sd_expected[0] = 1'bX;
end 
// expected Su[ 3 ]
initial
begin
	Su_expected[3] = 1'bX;
end 
// expected Su[ 2 ]
initial
begin
	Su_expected[2] = 1'bX;
end 
// expected Su[ 1 ]
initial
begin
	Su_expected[1] = 1'bX;
end 
// expected Su[ 0 ]
initial
begin
	Su_expected[0] = 1'bX;
end 

// expected Felicitacion
initial
begin
	Felicitacion_expected = 1'bX;
end 
// generate trigger
always @(Felicitacion_expected or Felicitacion or Mu_expected or Mu or Sd_expected or Sd or Su_expected or Su)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Felicitacion = %b | expected Mu = %b | expected Sd = %b | expected Su = %b | ",Felicitacion_expected_prev,Mu_expected_prev,Sd_expected_prev,Su_expected_prev);
	$display("| real Felicitacion = %b | real Mu = %b | real Sd = %b | real Su = %b | ",Felicitacion_prev,Mu_prev,Sd_prev,Su_prev);
`endif
	if (
		( Felicitacion_expected_prev !== 1'bx ) && ( Felicitacion_prev !== Felicitacion_expected_prev )
		&& ((Felicitacion_expected_prev !== last_Felicitacion_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Felicitacion :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Felicitacion_expected_prev);
		$display ("     Real value = %b", Felicitacion_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Felicitacion_exp = Felicitacion_expected_prev;
	end
	if (
		( Mu_expected_prev[0] !== 1'bx ) && ( Mu_prev[0] !== Mu_expected_prev[0] )
		&& ((Mu_expected_prev[0] !== last_Mu_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mu[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mu_expected_prev);
		$display ("     Real value = %b", Mu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Mu_exp[0] = Mu_expected_prev[0];
	end
	if (
		( Mu_expected_prev[1] !== 1'bx ) && ( Mu_prev[1] !== Mu_expected_prev[1] )
		&& ((Mu_expected_prev[1] !== last_Mu_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mu[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mu_expected_prev);
		$display ("     Real value = %b", Mu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Mu_exp[1] = Mu_expected_prev[1];
	end
	if (
		( Mu_expected_prev[2] !== 1'bx ) && ( Mu_prev[2] !== Mu_expected_prev[2] )
		&& ((Mu_expected_prev[2] !== last_Mu_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mu[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mu_expected_prev);
		$display ("     Real value = %b", Mu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Mu_exp[2] = Mu_expected_prev[2];
	end
	if (
		( Mu_expected_prev[3] !== 1'bx ) && ( Mu_prev[3] !== Mu_expected_prev[3] )
		&& ((Mu_expected_prev[3] !== last_Mu_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mu[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mu_expected_prev);
		$display ("     Real value = %b", Mu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Mu_exp[3] = Mu_expected_prev[3];
	end
	if (
		( Sd_expected_prev[0] !== 1'bx ) && ( Sd_prev[0] !== Sd_expected_prev[0] )
		&& ((Sd_expected_prev[0] !== last_Sd_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sd_expected_prev);
		$display ("     Real value = %b", Sd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Sd_exp[0] = Sd_expected_prev[0];
	end
	if (
		( Sd_expected_prev[1] !== 1'bx ) && ( Sd_prev[1] !== Sd_expected_prev[1] )
		&& ((Sd_expected_prev[1] !== last_Sd_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sd_expected_prev);
		$display ("     Real value = %b", Sd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Sd_exp[1] = Sd_expected_prev[1];
	end
	if (
		( Sd_expected_prev[2] !== 1'bx ) && ( Sd_prev[2] !== Sd_expected_prev[2] )
		&& ((Sd_expected_prev[2] !== last_Sd_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sd_expected_prev);
		$display ("     Real value = %b", Sd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Sd_exp[2] = Sd_expected_prev[2];
	end
	if (
		( Su_expected_prev[0] !== 1'bx ) && ( Su_prev[0] !== Su_expected_prev[0] )
		&& ((Su_expected_prev[0] !== last_Su_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Su[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Su_expected_prev);
		$display ("     Real value = %b", Su_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Su_exp[0] = Su_expected_prev[0];
	end
	if (
		( Su_expected_prev[1] !== 1'bx ) && ( Su_prev[1] !== Su_expected_prev[1] )
		&& ((Su_expected_prev[1] !== last_Su_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Su[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Su_expected_prev);
		$display ("     Real value = %b", Su_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Su_exp[1] = Su_expected_prev[1];
	end
	if (
		( Su_expected_prev[2] !== 1'bx ) && ( Su_prev[2] !== Su_expected_prev[2] )
		&& ((Su_expected_prev[2] !== last_Su_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Su[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Su_expected_prev);
		$display ("     Real value = %b", Su_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Su_exp[2] = Su_expected_prev[2];
	end
	if (
		( Su_expected_prev[3] !== 1'bx ) && ( Su_prev[3] !== Su_expected_prev[3] )
		&& ((Su_expected_prev[3] !== last_Su_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Su[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Su_expected_prev);
		$display ("     Real value = %b", Su_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Su_exp[3] = Su_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Cronometro_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg Switche;
// wires                                               
wire Felicitacion;
wire [3:0] Mu;
wire [2:0] Sd;
wire [3:0] Su;

wire sampler;                             

// assign statements (if any)                          
Cronometro i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.Felicitacion(Felicitacion),
	.Mu(Mu),
	.Sd(Sd),
	.Su(Su),
	.Switche(Switche)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// Switche
initial
begin
	Switche = 1'b1;
	Switche = #490000 1'b0;
	Switche = #40000 1'b1;
end 

Cronometro_vlg_sample_tst tb_sample (
	.clk(clk),
	.Switche(Switche),
	.sampler_tx(sampler)
);

Cronometro_vlg_check_tst tb_out(
	.Felicitacion(Felicitacion),
	.Mu(Mu),
	.Sd(Sd),
	.Su(Su),
	.sampler_rx(sampler)
);
endmodule

